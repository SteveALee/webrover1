<html>
	<head>
		<title>Web Rover FTW!</title>
		<style>
			body{
				font:sans-serif;
			}
		</style>
		<script type="text/javascript">
		function startup() {
			var el = document.getElementsByTagName("canvas")[0];
			el.addEventListener("touchstart", handleStart, false);
			el.addEventListener("touchend", handleEnd, false);
			el.addEventListener("touchcancel", handleCancel, false);
//			el.addEventListener("touchleave", handleLeave, false);
			el.addEventListener("touchmove", handleMove, false);
		}

		function handleStart(evt) {
			evt.preventDefault();
			var el = document.getElementsByTagName("canvas")[0];
			el.style.backgroundColor = "#f00";
			var ctx = el.getContext("2d");
			var touches = evt.changedTouches;
					   
			for (var i=0; i<touches.length; i++) {
				ongoingTouches.push(touches[i]);
				var color = colorForTouch(touches[i]);
				ctx.fillStyle = color;
				ctx.fillRect(touches[i].pageX-2, touches[i].pageY-2, 4, 4);
			}
		}
		function handleMove(evt) {
			evt.preventDefault();
			var el = document.getElementsByTagName("canvas")[0];
			var ctx = el.getContext("2d");
			var touches = evt.changedTouches;
			 
			ctx.lineWidth = 4;
					   
			for (var i=0; i<touches.length; i++) {
				var color = colorForTouch(touches[i]);
				var idx = ongoingTouchIndexById(touches[i].identifier);
		 
				ctx.fillStyle = color;
				ctx.beginPath();
				ctx.moveTo(ongoingTouches[idx].pageX, ongoingTouches[idx].pageY);
				ctx.lineTo(touches[i].pageX, touches[i].pageY);
				ctx.closePath();
				ctx.stroke();
				ongoingTouches.splice(idx, 1, touches[i]);  // swap in the new touch record
			}
		}
		function handleEnd(evt) {
			evt.preventDefault();
			var el = document.getElementsByTagName("canvas")[0];
			var ctx = el.getContext("2d");
			var touches = evt.changedTouches;
			 
			ctx.lineWidth = 4;
					   
			for (var i=0; i<touches.length; i++) {
				var color = colorForTouch(touches[i]);
				var idx = ongoingTouchIndexById(touches[i].identifier);
				 
				ctx.fillStyle = color;
				ctx.beginPath();
				ctx.moveTo(ongoingTouches[i].pageX, ongoingTouches[i].pageY);
				ctx.lineTo(touches[i].pageX, touches[i].pageY);
				ongoingTouches.splice(i, 1);  // remove it; we're done
			}
		}
		function handleCancel(evt) {
			evt.preventDefault();
			var touches = evt.changedTouches;
			 
			for (var i=0; i<touches.length; i++) {
				ongoingTouches.splice(i, 1);  // remove it; we're done
			}
		}
		function colorForTouch(touch) {
			var id = touch.identifier;
			id = id.toString(16); // make it a hex digit
			return "#" + id + id + id;
		}
		function ongoingTouchIndexById(idToFind) {
			for (var i=0; i<ongoingTouches.length; i++) {
				var id = ongoingTouches[i].identifier;
				 
				if (id == idToFind) {
					return i;
				}
			}
			return -1;    // not found
		}  
		function onTouch(evt) {
  evt.preventDefault();
  if (evt.touches.length > 1 || (evt.type == "touchend" && evt.touches.length > 0))
    return;
 
  var newEvt = document.createEvent("MouseEvents");
  var type = null;
  var touch = null;
  switch (event.type) {
    case "touchstart": type = "mousedown"; touch = event.changedTouches[0];
    case "touchmove":  type = "mousemove"; touch = event.changedTouches[0];
    case "touchend":   type = "mouseup"; touch = event.changedTouches[0];
  }
  newEvt.initMouseEvent(type, true, true, event.originalTarget.ownerDocument.defaultView, 0,
    touch.screenX, touch.screenY, touch.clientX, touch.clientY,
    evt.ctrlKey, evt.altKey, evt.shirtKey, evt.metaKey, 0, null);
  event.originalTarget.dispatchEvent(newEvt);
}
		</script>
	</head>
	<body onLoad="startup();">
		<h1>Web Rover</h1>
		<canvas style="width:300px;height:300px;border: 1px solid;">
			
		</canvas>
	</body>
</html>
